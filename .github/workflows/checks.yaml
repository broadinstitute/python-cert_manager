---
name: 'checks'

'on':
  pull_request:
    branches:
      - 'main'
  push:
    branches:
      - 'main'

jobs:
  linting:
    runs-on: 'ubuntu-latest'
    steps:
      - name: 'Checkout repo'
        uses: 'actions/checkout@v3'

      - name: 'Set up Python 3.10'
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Get full python version
        id: full-python-version
        run: |
          echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: 'Cache pip'
        uses: 'actions/cache@v3'
        with:
          path: '.venv'
          key: venv-v1-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}

      - name: 'Create virtual environment'
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install pylama pylint yamllint

      - name: 'Lint with yamllint'
        run: |
          source .venv/bin/activate
          yamllint . -s

      - name: 'Lint with pylama'
        run: |
          source .venv/bin/activate
          pylama -v --skip '.venv/*'

  unit-tests:
    runs-on: 'ubuntu-latest'
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']
    steps:
      - name: 'Checkout repo'
        uses: 'actions/checkout@v3'

      - name: Set up Python ${{ matrix.python-version }}
        uses: 'actions/setup-python@v4'
        with:
          python-version: ${{ matrix.python-version }}

      - name: 'Install pip and Poetry'
        run: |
          python -m pip install --upgrade pip poetry
          poetry config virtualenvs.in-project true

      - name: Get full python version
        id: full-python-version
        run: |
          echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: 'Cache poetry'
        uses: 'actions/cache@v3'
        with:
          path: '.venv'
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: 'Check pyproject.toml'
        run: 'poetry check'

      - name: 'Install dependencies'
        run: 'poetry install'

      - name: 'Test with green'
        # test with one test for now
        run: |
          poetry run green tests
          poetry run coverage xml

      - name: 'Run a test module build and install'
        run: |
          poetry build
          pip install dist/cert_manager-*.tar.gz

      - name: 'Upload code coverage to Codecov'
        uses: 'codecov/codecov-action@v3.1.1'
        with:
          file: './coverage.xml'
          flags: 'unittests'
